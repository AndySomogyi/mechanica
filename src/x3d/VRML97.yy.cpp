#line 2 "VRML97.yy.cpp"

#line 4 "VRML97.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 236
#define YY_END_OF_BUFFER 237
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1534] =
    {   0,
        2,    2,    2,    2,  237,  236,    8,   11,  236,   10,
        2,    2,    1,    1,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,    6,    7,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
        5,    4,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,    8,   11,    0,   12,   10,
        9,    2,    1,    0,    2,    0,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,    2,  206,

      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,   47,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  148,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,

      206,  206,  206,  206,  206,  235,  235,    2,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,    0,
        2,    3,  206,  206,  206,  206,  206,   21,  206,  206,
      206,  206,  202,  206,  206,  206,  206,   33,  206,  206,
      206,  206,  206,   40,  206,  206,  206,  206,  206,   46,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      203,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,   86,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,

      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  125,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  185,  206,
      206,  191,  206,  206,  206,  206,  206,  206,  206,  206,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  234,  235,  235,  235,  235,  209,  206,  206,  206,

      206,  206,  206,  206,   25,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,   15,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,   13,   63,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  121,  206,  123,  206,  206,  206,
      206,  206,  206,  206,  133,  206,  206,  206,  206,  206,

      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  165,  166,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  190,  206,  206,  206,  206,  206,  206,  206,
      206,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,   15,  235,  235,  235,  235,  235,  235,  235,
      235,  235,   13,  235,  235,  235,  235,  206,  206,  206,
      206,  206,  206,   23,  206,  206,  206,  206,  206,   14,
      206,   35,  206,  206,  206,  206,  206,  206,  206,  206,

      204,  206,  206,  206,  206,  206,  205,  206,  206,   57,
       58,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,   92,  206,   96,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  120,  206,  206,  206,  206,  206,  206,  206,  131,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  151,  152,  206,  206,  155,
      206,  157,  206,  206,  206,  162,  206,  206,  206,  169,

      206,  206,  206,  206,  174,  175,  206,  206,  206,  179,
      206,  206,  184,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,   14,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  210,  235,   16,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,   39,  206,  206,  206,   44,  206,  206,
      206,  206,  206,  206,  206,  206,   56,   59,  206,   62,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,   83,   87,

      206,   89,  206,  206,  206,   95,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  108,  109,  206,
      206,  206,  206,  206,  206,  206,  118,  206,  206,  206,
      206,  206,  206,  206,  130,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  144,  147,  206,  206,
      206,  206,  156,  206,  206,  206,  206,  206,  206,  206,
      170,  206,  206,  206,  206,  206,  178,  206,  206,  206,
      187,  206,  206,  206,  192,  206,  206,  206,  206,  206,
      206,  223,  235,  235,  235,  235,  228,  235,  235,  226,
      235,  235,  213,  235,  235,  235,  218,  235,  235,  216,

      235,  235,  235,  235,  235,  235,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,   78,  206,  206,
      206,  206,  206,  206,  206,   90,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  107,  206,
      111,  206,  206,  206,  206,  206,  206,  206,  206,  124,
      206,  206,  206,  129,  206,  206,  206,  136,  206,  206,
      206,  206,  141,  206,  206,  206,  206,  206,  206,  206,

      206,  158,  159,  206,  206,  206,  206,  206,  206,  171,
      206,  206,  206,  206,  206,  182,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  229,  224,  230,  225,
      235,  235,  232,  233,  219,  214,  215,  235,  235,  221,
      222,  235,  211,  235,  235,  206,  206,  206,  206,  206,
      206,  206,   28,  206,  206,  206,  206,  206,  206,  206,
       41,  206,  206,  206,  206,  206,  206,  206,   52,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,   80,
      206,   82,  206,  206,   88,  206,  206,  206,  206,  206,

      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      113,  114,  206,  206,  206,  206,  206,  126,  127,  206,
      132,  134,  135,  206,  138,  206,  140,  142,  206,  206,
      206,  206,  206,  153,  154,  160,  161,  206,  206,  167,
      168,  206,  206,  206,  177,  180,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  198,  206,  200,  235,  231,
      235,  220,  235,  212,  235,  206,   18,  206,   20,   22,
      206,  206,  206,  206,  206,   32,   34,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,   61,  206,  206,  206,  206,   68,   69,  206,   71,

      206,  206,  206,  206,  206,  206,  206,   81,  206,   85,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      104,  105,  206,  206,  112,  206,  206,  117,  206,  122,
      206,  137,  206,  206,  206,  206,  206,  150,  206,  164,
      206,  206,  176,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  235,  235,  235,  235,   17,   19,
      206,   26,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,   51,  206,  206,  206,  206,  206,
      206,   66,  206,  206,  206,   73,  206,   75,   76,  206,
       79,  206,  206,   93,  206,   97,  206,  206,  206,  206,

      206,  206,  206,  206,  206,  206,  119,  206,  206,  206,
      206,  206,  206,  206,  172,  206,  206,  206,  206,  206,
      206,  206,  206,  195,  206,  197,  199,  227,  217,  235,
      235,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,   50,  206,  206,  206,  206,  206,
      206,   67,  206,  206,   74,  206,  206,   91,  206,   98,
      206,  100,  206,  102,  206,  206,  110,  115,  116,  128,
      139,  143,  145,  206,  149,  206,  206,  206,  206,  186,
      188,  206,  206,  206,  206,  196,  235,  235,  206,  206,
      206,  206,  206,   36,  206,  206,   42,  206,  206,  206,

       49,  206,  206,  206,   60,  206,  206,  206,  206,  206,
       84,  206,   99,  206,  103,  206,  206,  206,  206,  206,
      206,  189,  206,  206,  206,  207,  208,  206,  206,  206,
      206,   31,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  101,  106,  206,  206,
      173,  181,  206,  201,  206,  206,  206,  206,   29,  206,
       37,   38,   43,  206,  206,  206,  206,  206,  206,  206,
      206,  206,   77,   94,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,   54,  206,  206,  206,  206,
      206,  146,  206,  206,  193,  194,  206,  206,   30,  206,

      206,  206,  206,  206,   65,   70,   72,  163,  183,   24,
      206,  206,  206,  206,  206,   64,  206,   45,  206,  206,
       55,  206,  206,  206,  206,  206,   53,  206,  206,   27,
      206,   48,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    1,    1,
        1,    1,    6,    2,    7,    8,    1,    9,   10,   11,
       12,   10,   10,   10,   10,   10,   10,    1,    1,    1,
        1,    1,    1,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   20,   20,   22,   23,   24,   25,   26,
       20,   27,   28,   29,   30,   31,   32,   20,   20,   20,
       33,    1,   34,    1,   35,    1,   36,   37,   38,   39,

       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   20,   52,   53,   54,   55,   56,   57,   58,
       59,   60,   61,    1,   62,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[63] =
    {   0,
        1,    1,    2,    1,    1,    3,    3,    1,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    1,    1,    3,    4,    4,    4,    4,    4,
        4,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        1,    1
    } ;

static yyconst flex_int16_t yy_base[1540] =
    {   0,
        0,    0,   62,    0, 1685, 1686, 1682,    0, 1679, 1679,
      117,  121,  131,  141,  105,  119,   85,  120,  166,  132,
     1629,    0,   98, 1655,  129,  138,  162,  140, 1654,  153,
      167, 1650, 1633, 1626, 1686, 1686,  167,  162,  188,  122,
      223,  200,  143,  166,  152, 1620, 1634,  201,  149, 1623,
      156,  209,  218,  231,  236, 1620,  220, 1628,  211,  239,
     1686, 1686,    0,  287, 1657, 1651, 1638, 1649, 1639, 1637,
     1620,  294, 1619, 1607, 1609, 1658,    0, 1655, 1686, 1655,
     1686,  298,  308,  317,  322,    0,    0, 1619, 1605, 1616,
     1616, 1606, 1594,  199, 1604, 1632, 1597,  280,  302, 1608,

     1593, 1624,  221, 1595, 1608,  218, 1627, 1588, 1585, 1618,
     1583, 1586, 1619,    0, 1592, 1610, 1576, 1597,  234, 1582,
     1601,  285, 1594, 1574,  223, 1584, 1597, 1568, 1577, 1569,
     1587, 1605,  282, 1569, 1583, 1568, 1564, 1563, 1580, 1571,
     1576, 1563,  294, 1558, 1554, 1561,  296,  294,  302, 1555,
     1570, 1554,  304, 1562,  315, 1557, 1564,  311, 1553, 1552,
     1551,  311, 1548, 1563,  317,  231, 1539, 1548,  318,  311,
      310, 1547, 1543, 1553,    0, 1549, 1540, 1537,  319,  325,
      327, 1539, 1547, 1534, 1551, 1542,  326, 1526,  323,  337,
      343, 1526, 1529, 1531, 1545, 1529, 1532, 1531, 1539, 1523,

     1531, 1530, 1522, 1528, 1520,    0,  373,  378, 1548,  382,
     1547,  400, 1538, 1550, 1514, 1525, 1524, 1510, 1515,  423,
      427,    0, 1518, 1520, 1515, 1512, 1510,    0,  344, 1516,
     1503, 1510,    0, 1513, 1496, 1499, 1522,    0, 1495, 1493,
     1505, 1506, 1501,    0, 1504, 1499, 1520, 1497, 1492,    0,
     1499, 1509, 1497, 1487, 1486, 1490, 1475, 1503, 1484, 1486,
     1478, 1479, 1487, 1472, 1471, 1507, 1469, 1482, 1483, 1471,
        0, 1462, 1474, 1470, 1472, 1475, 1474, 1463, 1458, 1458,
     1464, 1451, 1460, 1463, 1452,    0, 1451, 1457, 1459,  351,
     1446, 1449, 1464, 1446, 1473, 1450, 1458, 1454, 1454, 1447,

     1439, 1454, 1475, 1445, 1441, 1458, 1432, 1436, 1436, 1428,
     1443, 1439, 1436, 1437, 1428, 1437, 1425, 1421, 1443, 1431,
     1418, 1429, 1430, 1433, 1417, 1427,  427,  394, 1418, 1412,
     1424, 1427, 1424, 1412, 1416, 1409, 1400, 1413, 1414, 1415,
     1411, 1417, 1405, 1402, 1410, 1409,  404, 1404, 1395,  388,
      385, 1397, 1393, 1393, 1399, 1395,  155, 1394,  375, 1391,
     1399,    0, 1383, 1383, 1392, 1397, 1386, 1397, 1384, 1395,
     1402, 1379, 1378, 1380,  398, 1376, 1375, 1370, 1379, 1382,
     1399, 1370, 1369, 1371, 1368, 1366, 1365, 1360, 1369, 1372,
     1394,    0, 1370, 1360, 1361, 1353,    0, 1356, 1369, 1354,

     1361, 1365, 1357, 1348,    0, 1360, 1349, 1359, 1360, 1340,
     1377, 1365, 1341, 1351, 1332, 1340, 1336, 1347,    0, 1344,
     1349, 1335, 1358, 1335, 1341, 1326, 1325, 1334, 1360, 1340,
     1324, 1334, 1334, 1320, 1349, 1332,    0, 1314, 1340, 1324,
     1313, 1314, 1327, 1324, 1322, 1325, 1311, 1334, 1322, 1332,
     1326,  415, 1323, 1305, 1303, 1312, 1312, 1312, 1305, 1296,
     1307, 1307, 1292, 1291, 1302, 1302, 1289, 1285, 1301, 1325,
     1284, 1289, 1299, 1287, 1294, 1273, 1303, 1276, 1289, 1279,
     1280, 1283, 1265, 1284,    0, 1274,    0, 1278, 1285, 1265,
      419, 1265, 1271, 1263,    0, 1264, 1266, 1278, 1255, 1260,

     1261, 1261, 1273, 1256, 1257, 1270, 1265, 1255, 1255, 1259,
     1247, 1246, 1247, 1239, 1242, 1256, 1259, 1240, 1239, 1252,
     1247,    0,    0, 1241, 1239, 1249, 1249, 1242, 1241, 1229,
     1244, 1242, 1227, 1251, 1230, 1238, 1227, 1221, 1235, 1224,
     1221, 1219,    0, 1231, 1220, 1232, 1225, 1227, 1228, 1225,
     1226, 1246, 1212, 1214, 1210, 1223, 1204, 1218, 1202, 1203,
     1206, 1215,    0, 1202, 1204, 1200, 1195, 1209, 1193, 1194,
     1197, 1206,    0, 1205, 1188, 1202, 1223, 1187, 1186, 1222,
     1184, 1185, 1181, 1212, 1188, 1192, 1176, 1175, 1175,    0,
     1173,    0, 1197, 1185, 1184, 1179, 1193, 1185, 1173, 1165,

        0, 1189, 1189,  394, 1172, 1167,    0, 1162, 1159,    0,
        0, 1172, 1167, 1167, 1157, 1168, 1179, 1165, 1155, 1160,
     1182, 1153, 1149, 1145, 1158, 1146, 1156, 1144, 1155, 1150,
     1149, 1177, 1143, 1138, 1137, 1148, 1148,  429,   78,  138,
      180,  214,  242,  281,  336,  339,  345,  402,  408,  414,
      405,  398,  433,  408,  406,  431,  408,  424,  420,  411,
      416,    0,  414,  427,  422,  434,  421,  420,  430,    0,
      430,  431,  434,  439,  424,  429,  427,  439,  444,  433,
      431,  438,  432,  433,  448,    0,    0,  445,  446,    0,
      438,    0,  438,  463,  450,  470,  447,  455,  451,    0,

      459,  451,  465,  455,    0,    0,  474,  460,  463,    0,
      456,  455,    0,  494,  462,  463,  476,  460,  469,  500,
      467,  473,  469,  475,    0,  473,  471,  486,  481,  512,
      485,  490,  483,  488,  518,  484,  482,  497,  522,  495,
      500,  493,  498,  528,  487,  521,    0,  487,    0,  508,
      498,  497,  512,  505,  501,  502,  512,  509,  510,  511,
      497,  517,  519,    0,  523,  520,  507,  541,  527,  524,
      525,  522,  527,  518,  525,  549,    0,  543,  530,    0,
      533,  525,  535,  526,  533,  531,  530,  526,  545,  546,
      542,  556,  558,  539,  538,  528,  550,  554,  564,    0,

      552,    0,  553,  546,  556,    0,  548,  585,  559,  587,
      552,  551,  563,  560,  563,  550,  568,    0,    0,  567,
      569,  551,  559,  560,  600,  572,    0,  567,  573,  559,
      564,  578,  594,  575,    0,  573,  588,  578,  580,  587,
      579,  585,  583,  585,  583,  589,  613,    0,  599,  582,
      587,  584,    0,  612,  590,  593,  592,  605,  599,  597,
        0,  606,  602,  614,  607,  604,    0,  601,  614,  605,
        0,  620,  621,  620,    0,  612,  617,  608,  613,  610,
      615,    0,  613,  612,  627,  657,    0,  615,  621,    0,
      630,  631,    0,  621,  620,  664,    0,  622,  628,    0,

      637,  638,  655,  632,  627,  647,  635,  641,  631,  635,
      638,  635,  654,  639,  642,  643,  644,  648,  638,  679,
      651,  641,  656,  653,  649,  646,  656,  664,  653,  659,
      655,  661,  671,  669,  698,  661,  666,  664,  668,  674,
      678,  699,  672,  668,  670,  680,  675,    0,  672,  688,
      675,  679,  695,  680,  684,  705,  696,  684,  698,  689,
      701,  691,  687,  688,  728,  694,  698,  706,    0,  716,
        0,  701,  702,  691,  702,  702,  710,  700,  701,    0,
      716,  717,  714,    0,  710,  713,  721,    0,  713,  709,
      710,  725,    0,  712,  713,  719,  729,  716,  731,  723,

      714,    0,    0,  727,  726,  732,  724,  738,  727,    0,
      736,  729,  734,  743,  745,  756,  732,  733,  736,  746,
      746,  747,  748,  751,  750,  753,    0,    0,    0,    0,
      752,  756,    0,    0,    0,    0,    0,  755,  758,    0,
        0,  746,    0,  748,  756,  766,  754,  757,  768,  759,
      769,  756,  783,  763,  764,  765,  775,  762,  781,  774,
        0,  765,  770,  767,  778,  769,  771,  782,    0,  805,
      768,  774,  780,  776,  781,  780,  783,  781,  787,  782,
      783,  788,  790,  802,  797,  802,  783,  790,  805,    0,
      803,    0,  808,  801,    0,  805,  810,  820,  812,  811,

      800,  813,  816,  813,  808,  810,  820,  846,  818,  823,
        0,    0,  822,  818,  812,  831,  809,    0,    0,  827,
        0,    0,    0,  816,    0,  827,    0,    0,  828,  834,
      822,  831,  824,    0,    0,    0,    0,  837,  825,    0,
        0,  819,  865,  841,    0,  861,  831,  830,  841,  846,
      851,  834,  842,  846,  841,    0,  842,    0,  843,    0,
      844,    0,  841,    0,  841,  857,    0,  859,    0,    0,
      847,  860,  861,  866,  884,    0,    0,  849,  867,  857,
      852,  859,  869,  860,  856,  862,  859,  865,  887,  876,
      864,    0,  868,  883,  868,  871,    0,    0,  863,    0,

      869,  884,  875,  872,  887,  892,  877,    0,  886,    0,
      883,  874,  893,  876,  888,  892,  890,  886,  889,  893,
        0,    0,  891,  902,    0,  896,  894,    0,  898,    0,
      903,    0,  897,  898,  909,  919,  901,    0,  903,    0,
      913,  904,    0,  906,  920,  907,  908,  910,  911,  902,
      923,  925,  915,  916,  917,  918,  917,  933,    0,    0,
      919,  950,  923,  926,  922,  923,  936,  937,  926,  958,
      928,  932,  930,  931,    0,  930,  945,  934,  937,  936,
      940,    0,  938,  963,  952,    0,  944,    0,    0,  940,
        0,  940,  956,    0,  945,    0,  958,  949,  960,  945,

      953,  953,  957,  948,  966,  955,    0,  954,  960,  961,
      953,  972,  964,  960,    0,  968,  977,  968,  970,  970,
      982,  979, 1000,    0,  983,    0,    0,    0,    0,  969,
      971,  976,  979,  976, 1008,  987,  992, 1005, 1006,  995,
      987,  986, 1017,  999,    0, 1000,  992,  991,  991, 1005,
      992,    0, 1006,  998,    0, 1004,  996,    0,  996,    0,
     1002,    0, 1016,    0, 1001, 1004,    0,    0,    0,    0,
        0,    0,    0, 1003,    0, 1020, 1007, 1018, 1006,    0,
        0, 1001, 1021, 1018, 1027,    0, 1010, 1025, 1019, 1013,
     1018, 1025, 1031,    0, 1031, 1032,    0, 1032, 1024, 1026,

        0, 1024, 1024, 1028,    0, 1035, 1039, 1032, 1029, 1033,
        0, 1044,    0, 1038,    0, 1034, 1033, 1034, 1037, 1032,
     1050,    0, 1053, 1045, 1045,    0,    0, 1059, 1056, 1045,
     1056,    0, 1045, 1046, 1051, 1055, 1049, 1053, 1055, 1059,
     1058, 1058, 1056, 1066, 1062, 1054,    0,    0, 1073, 1070,
        0,    0, 1065,    0, 1072, 1075, 1064, 1067,    0, 1077,
        0,    0,    0, 1085, 1082, 1073, 1072, 1089, 1090, 1075,
     1078, 1075,    0,    0, 1072, 1081, 1080, 1079, 1094, 1085,
     1085, 1083, 1084, 1087, 1093,    0, 1087, 1088, 1095, 1092,
     1086,    0, 1097, 1099,    0,    0, 1096, 1099,    0, 1100,

     1100, 1116, 1103, 1114,    0,    0,    0,    0,    0,    0,
     1108, 1104, 1107, 1104, 1107,    0, 1124,    0, 1114, 1112,
        0, 1109, 1128, 1113, 1116, 1113,    0, 1116, 1119,    0,
     1118,    0, 1686, 1170, 1174, 1178, 1180, 1182, 1168
    } ;

static yyconst flex_int16_t yy_def[1540] =
    {   0,
     1533,    1, 1533,    3, 1533, 1533, 1533, 1534, 1535, 1536,
     1533, 1533, 1533, 1533, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1533, 1533, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1533, 1533, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538,
     1538, 1538, 1538, 1538, 1538, 1533, 1534, 1535, 1533, 1536,
     1533, 1533, 1533, 1533, 1533, 1539, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,

     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,

     1537, 1537, 1537, 1537, 1537, 1538, 1538, 1538, 1538, 1538,
     1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1533,
     1533, 1539, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,

     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538,
     1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538,
     1538, 1538, 1538, 1538, 1538, 1538, 1538, 1537, 1537, 1537,

     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,

     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538,
     1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538,
     1538, 1538, 1538, 1538, 1538, 1538, 1538, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,

     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,

     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1538, 1538, 1538, 1538, 1538, 1538,
     1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538,
     1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,

     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538,
     1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538,

     1538, 1538, 1538, 1538, 1538, 1538, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,

     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1538, 1538, 1538, 1538,
     1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538,
     1538, 1538, 1538, 1538, 1538, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,

     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1538, 1538,
     1538, 1538, 1538, 1538, 1538, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,

     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1538, 1538, 1538, 1538, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,

     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1538, 1538, 1538,
     1538, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1538, 1538, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,

     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1538, 1538, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,

     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537,    0, 1533, 1533, 1533, 1533, 1533, 1533
    } ;

static yyconst flex_int16_t yy_nxt[1749] =
    {   0,
        6,    7,    8,    9,   10,    6,   11,   12,   13,   14,
       14,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   22,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   58,   59,   22,   60,
       61,   62,    6,    7,    8,    9,   10,    6,   11,   12,
       13,   14,   14,   14,   63,   63,   63,   63,   64,   65,
       63,   63,   63,   63,   66,   67,   63,   63,   63,   68,
       69,   70,   63,   63,   35,   36,   63,   63,   63,   63,

       71,   72,   73,   63,   63,   63,   63,   63,   63,   74,
       63,   63,   63,   63,   63,   63,   75,   63,   63,   63,
       63,   63,   61,   62,   82,   83,   83,   83,   83,   85,
       85,   85,   85,   84,   94,  806,   96,   84,   82,   83,
       83,   83,   83,   95,  102,  105,  106,   84,   82,   83,
       83,   83,   83,   88,   91,   89,   84,   84,  807,   90,
       84,  152,   92,   97,  108,  153,  116,  110,   93,  537,
       84,   98,   98,  111,   99,   99,   99,   99,  109,  113,
       84,  103,  160,  117,  171,  114,  118,  112,   86,  119,
      122,  120,  172,  127,  161,  123,  174,  141,  142,  164,

      165,  143,  124,  125,  175,  162,  128,  176,  538,  126,
      129,  144,  100,  115,  135,  163,  130,  136,  131,  808,
      137,  138,  139,  101,  140,  145,  202,  146,   98,   98,
      147,   99,   99,   99,   99,  156,  168,  148,  203,  149,
      169,  809,  150,  157,  177,  229,  151,  230,  231,  158,
      170,  159,  178,  181,  204,  198,  242,  182,  179,  199,
      180,  183,  238,  200,  243,  263,  205,  184,  185,  239,
      154,  155,  264,  186,  187,  192,  188,  255,  317,  193,
      189,  190,  810,  318,  191,  194,  256,  195,   99,   99,
       99,   99,  207,  207,  196,  208,  208,  208,  208,  207,

      207,  811,  208,  208,  208,  208,   85,   85,   85,   85,
       99,   99,   99,   99,   84,   82,   83,   83,   83,   83,
      259,  272,  220,  220,   84,  221,  221,  221,  221,  283,
       85,   85,   85,   85,  273,  284,  260,   84,   84,  288,
      290,  293,  291,  292,  298,  289,  311,   84,  324,  216,
      302,  294,  306,  303,  312,  299,  300,  315,  321,  307,
      325,   84,  334,  326,  345,  338,  322,  327,  336,  348,
      316,  335,  350,  323,  337,  339,  351,  349,  353,  812,
      352,  208,  208,  208,  208,  346,  208,  208,  208,  208,
      403,  813,  354,  404,  355,  372,  373,  459,  814,  374,

      460,  356,  375,  540,  541,  376,  502,  503,  377,  378,
      379,  504,  380,  382,  383,  772,  524,  384,  525,  505,
      385,  773,  530,  386,  531,  528,  387,  388,  389,  629,
      390,  221,  221,  221,  221,  221,  221,  221,  221,  497,
      498,  529,  630,  499,  500,  556,  557,  667,  668,  804,
      815,  816,  501,  817,  805,  818,  819,  820,  821,  822,
      823,  824,  825,  826,  827,  828,  829,  830,  831,  832,
      833,  834,  835,  836,  837,  838,  839,  840,  841,  842,
      843,  844,  845,  846,  847,  848,  849,  850,  851,  852,
      853,  854,  855,  856,  857,  858,  859,  860,  861,  862,

      863,  864,  865,  866,  867,  868,  869,  870,  871,  872,
      874,  875,  876,  873,  877,  878,  879,  880,  881,  882,
      883,  884,  885,  886,  887,  888,  889,  890,  891,  892,
      893,  894,  895,  896,  897,  898,  899,  900,  901,  902,
      903,  904,  906,  907,  908,  905,  909,  910,  911,  912,
      913,  914,  915,  916,  917,  918,  919,  920,  921,  922,
      923,  924,  925,  926,  927,  928,  929,  930,  931,  932,
      933,  934,  935,  936,  937,  938,  939,  940,  941,  942,
      943,  944,  945,  946,  947,  948,  949,  950,  951,  952,
      953,  955,  956,  954,  957,  958,  959,  960,  961,  962,

      963,  964,  965,  966,  967,  968,  969,  970,  971,  972,
      973,  974,  975,  977,  976,  978,  979,  980,  981,  982,
      983,  984,  985,  986,  987,  988,  989,  990,  991,  992,
      993,  994,  995,  996,  998,  999, 1000, 1001,  997, 1002,
     1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,
     1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
     1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032,
     1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042,
     1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052,
     1053, 1054, 1055, 1056, 1057, 1058, 1059, 1061, 1062, 1063,

     1060, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072,
     1073, 1074, 1075, 1077, 1078, 1079, 1080, 1081, 1082, 1083,
     1084, 1085, 1086, 1087, 1088, 1089, 1076, 1090, 1091, 1092,
     1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102,
     1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112,
     1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122,
     1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132,
     1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142,
     1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152,
     1153, 1155, 1156, 1157, 1158, 1159, 1154, 1160, 1161, 1162,

     1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172,
     1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182,
     1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192,
     1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202,
     1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212,
     1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222,
     1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232,
     1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242,
     1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252,
     1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262,

     1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272,
     1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
     1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292,
     1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302,
     1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312,
     1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322,
     1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332,
     1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342,
     1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352,
     1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362,

     1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372,
     1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382,
     1383, 1384, 1386, 1387, 1388, 1389, 1385, 1390, 1391, 1392,
     1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402,
     1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412,
     1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422,
     1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432,
     1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442,
     1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452,
     1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462,

     1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472,
     1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482,
     1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492,
     1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502,
     1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512,
     1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522,
     1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532,
       77,  222,   77,   77,   78,   78,   78,   78,   80,   80,
       80,   80,   87,   87,  206,  206,  803,  802,  801,  800,
      799,  798,  797,  796,  795,  794,  793,  792,  791,  790,

      789,  788,  787,  786,  785,  784,  783,  782,  781,  780,
      779,  778,  777,  776,  775,  774,  771,  770,  769,  768,
      767,  766,  765,  764,  763,  762,  761,  760,  759,  758,
      757,  756,  755,  754,  753,  752,  751,  750,  749,  748,
      747,  746,  745,  744,  743,  742,  741,  740,  739,  738,
      737,  736,  735,  734,  733,  732,  731,  730,  729,  728,
      727,  726,  725,  724,  723,  722,  721,  720,  719,  718,
      717,  716,  715,  714,  713,  712,  711,  710,  709,  708,
      707,  706,  705,  704,  703,  702,  701,  700,  699,  698,
      697,  696,  695,  694,  693,  692,  691,  690,  689,  688,

      687,  686,  685,  684,  683,  682,  681,  680,  679,  678,
      677,  676,  675,  674,  673,  672,  671,  670,  669,  666,
      665,  664,  663,  662,  661,  660,  659,  658,  657,  656,
      655,  654,  653,  652,  651,  650,  649,  648,  647,  646,
      645,  644,  643,  642,  641,  640,  639,  638,  637,  636,
      635,  634,  633,  632,  631,  628,  627,  626,  625,  624,
      623,  622,  621,  620,  619,  618,  617,  616,  615,  614,
      613,  612,  611,  610,  609,  608,  607,  606,  605,  604,
      603,  602,  601,  600,  599,  598,  597,  596,  595,  594,
      593,  592,  591,  590,  589,  588,  587,  586,  585,  584,

      583,  582,  581,  580,  579,  578,  577,  576,  575,  574,
      573,  572,  571,  570,  569,  568,  567,  566,  565,  564,
      563,  562,  561,  560,  559,  558,  555,  554,  553,  552,
      551,  550,  549,  548,  547,  546,  545,  544,  543,  542,
      539,  536,  535,  534,  533,  532,  527,  526,  523,  522,
      521,  520,  519,  518,  517,  516,  515,  514,  513,  512,
      511,  510,  509,  508,  507,  506,  496,  495,  494,  493,
      492,  491,  490,  489,  488,  487,  486,  485,  484,  483,
      482,  481,  480,  479,  478,  477,  476,  475,  474,  473,
      472,  471,  470,  469,  468,  467,  466,  465,  464,  463,

      462,  461,  458,  457,  456,  455,  454,  453,  452,  451,
      450,  449,  448,  447,  446,  445,  444,  443,  442,  441,
      440,  439,  438,  437,  436,  435,  434,  433,  432,  431,
      430,  429,  428,  427,  426,  425,  424,  423,  422,  421,
      420,  419,  418,  417,  416,  415,  414,  413,  412,  411,
      410,  409,  408,  407,  406,  405,  402,  401,  400,  399,
      398,  397,  396,  395,  394,  393,  392,  391,  381,  371,
      370,  369,  368,  367,  366,  365,  364,  363,  362,  361,
      360,  359,  358,  357,  347,  344,  343,  342,  341,  340,
      333,  332,  331,  330,  329,  328,  320,  319,  314,  313,

      310,  309,  308,  305,  304,  301,  297,  296,  295,  287,
      286,  285,  282,  281,  280,  279,  278,  277,  276,  275,
      274,  271,  270,  269,  268,  267,  266,  265,  262,  261,
      258,  257,  254,  253,  252,  251,  250,  249,  248,  247,
      246,  245,  244,  241,  240,  237,  236,  235,  234,  233,
      232,  228,  227,  226,  225,  224,  223,   81,   79,   76,
      219,  218,  217,  215,  214,  213,  212,  211,  210,  209,
      201,  197,  173,  167,  166,  134,  133,  132,  121,  107,
      104,   81,   79,   76, 1533,    5, 1533, 1533, 1533, 1533,
     1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533,

     1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533,
     1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533,
     1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533,
     1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533,
     1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533
    } ;

static yyconst flex_int16_t yy_chk[1749] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,   11,   11,   11,   11,   11,   12,
       12,   12,   12,   11,   17,  639,   18,   12,   13,   13,
       13,   13,   13,   17,   20,   23,   23,   13,   14,   14,
       14,   14,   14,   15,   16,   15,   11,   14,  640,   15,
       12,   40,   16,   18,   25,   40,   28,   26,   16,  357,
       13,   19,   19,   26,   19,   19,   19,   19,   25,   27,
       14,   20,   43,   28,   49,   27,   28,   26,   13,   28,
       30,   28,   49,   31,   43,   30,   51,   38,   38,   45,

       45,   38,   30,   30,   51,   44,   31,   51,  357,   30,
       31,   38,   19,   27,   37,   44,   31,   37,   31,  641,
       37,   37,   37,   19,   37,   39,   59,   39,   41,   41,
       39,   41,   41,   41,   41,   42,   48,   39,   59,   39,
       48,  642,   39,   42,   52,   94,   39,   94,   94,   42,
       48,   42,   52,   53,   60,   57,  106,   53,   52,   57,
       52,   53,  103,   57,  106,  125,   60,   53,   54,  103,
       41,   41,  125,   54,   54,   55,   54,  119,  166,   55,
       54,   54,  643,  166,   54,   55,  119,   55,   98,   98,
       98,   98,   64,   64,   55,   64,   64,   64,   64,   72,

       72,  644,   72,   72,   72,   72,   82,   82,   82,   82,
       99,   99,   99,   99,   82,   83,   83,   83,   83,   83,
      122,  133,   84,   84,   83,   84,   84,   84,   84,  143,
       85,   85,   85,   85,  133,  143,  122,   82,   85,  147,
      148,  149,  148,  148,  153,  147,  162,   83,  170,   72,
      155,  149,  158,  155,  162,  153,  153,  165,  169,  158,
      170,   85,  179,  171,  187,  181,  169,  171,  180,  189,
      165,  179,  190,  169,  180,  181,  190,  189,  191,  645,
      190,  207,  207,  207,  207,  187,  208,  208,  208,  208,
      229,  646,  191,  229,  191,  210,  210,  290,  647,  210,

      290,  191,  210,  359,  359,  210,  328,  328,  210,  210,
      210,  328,  210,  212,  212,  604,  347,  212,  347,  328,
      212,  604,  351,  212,  351,  350,  212,  212,  212,  452,
      212,  220,  220,  220,  220,  221,  221,  221,  221,  327,
      327,  350,  452,  327,  327,  375,  375,  491,  491,  638,
      648,  649,  327,  650,  638,  651,  652,  653,  654,  655,
      656,  657,  658,  659,  660,  661,  663,  664,  665,  666,
      667,  668,  669,  671,  672,  673,  674,  675,  676,  677,
      678,  679,  680,  681,  682,  683,  684,  685,  688,  689,
      691,  693,  694,  695,  696,  697,  698,  699,  701,  702,

      703,  704,  707,  708,  709,  711,  712,  714,  715,  716,
      717,  718,  719,  716,  720,  721,  722,  723,  724,  726,
      727,  728,  729,  730,  731,  732,  733,  734,  735,  735,
      736,  737,  738,  739,  740,  741,  742,  743,  744,  744,
      745,  746,  748,  750,  751,  746,  752,  753,  754,  755,
      756,  757,  758,  759,  760,  761,  762,  763,  765,  766,
      767,  768,  769,  770,  771,  772,  773,  774,  775,  776,
      778,  779,  781,  782,  783,  784,  785,  786,  787,  788,
      789,  790,  791,  792,  793,  794,  795,  796,  797,  798,
      799,  801,  803,  799,  804,  805,  807,  808,  809,  810,

      811,  812,  813,  814,  815,  816,  817,  820,  821,  822,
      823,  824,  825,  826,  825,  828,  829,  830,  831,  832,
      833,  834,  836,  837,  838,  839,  840,  841,  842,  843,
      844,  845,  846,  847,  849,  850,  851,  852,  847,  854,
      854,  855,  856,  857,  858,  859,  860,  862,  863,  864,
      865,  866,  868,  869,  870,  872,  873,  874,  876,  877,
      878,  879,  880,  881,  883,  884,  885,  886,  888,  889,
      891,  892,  894,  895,  896,  898,  899,  901,  902,  903,
      904,  905,  906,  907,  908,  909,  910,  911,  912,  913,
      914,  915,  916,  917,  918,  919,  920,  921,  922,  923,

      920,  924,  925,  926,  927,  928,  929,  930,  931,  932,
      933,  934,  935,  936,  937,  938,  939,  940,  941,  942,
      943,  944,  945,  946,  947,  949,  935,  950,  951,  952,
      953,  954,  955,  956,  957,  958,  959,  960,  961,  962,
      963,  964,  965,  966,  967,  968,  970,  972,  973,  974,
      975,  976,  977,  978,  979,  981,  982,  983,  985,  986,
      987,  989,  990,  991,  992,  994,  995,  996,  997,  998,
      999, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1011,
     1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021,
     1022, 1023, 1024, 1025, 1026, 1031, 1022, 1032, 1038, 1039,

     1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052,
     1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1063,
     1064, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1073, 1074,
     1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084,
     1085, 1086, 1087, 1088, 1089, 1091, 1093, 1094, 1096, 1097,
     1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107,
     1108, 1109, 1110, 1113, 1114, 1115, 1116, 1117, 1120, 1124,
     1126, 1129, 1130, 1131, 1132, 1133, 1138, 1139, 1142, 1143,
     1144, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154,
     1155, 1157, 1159, 1161, 1163, 1165, 1166, 1168, 1171, 1172,

     1173, 1174, 1175, 1178, 1179, 1180, 1181, 1182, 1183, 1184,
     1185, 1186, 1187, 1188, 1189, 1190, 1191, 1193, 1194, 1195,
     1196, 1199, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1209,
     1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220,
     1223, 1224, 1226, 1227, 1229, 1231, 1233, 1234, 1235, 1236,
     1237, 1239, 1241, 1242, 1244, 1245, 1246, 1247, 1248, 1249,
     1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1261,
     1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271,
     1272, 1273, 1274, 1276, 1277, 1278, 1279, 1280, 1281, 1283,
     1284, 1285, 1287, 1290, 1292, 1293, 1295, 1297, 1298, 1299,

     1300, 1301, 1302, 1303, 1304, 1305, 1306, 1308, 1309, 1310,
     1311, 1312, 1313, 1314, 1316, 1317, 1318, 1319, 1320, 1321,
     1322, 1323, 1325, 1330, 1331, 1332, 1323, 1333, 1334, 1335,
     1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1346,
     1347, 1348, 1349, 1350, 1351, 1353, 1354, 1356, 1357, 1359,
     1361, 1363, 1365, 1366, 1374, 1376, 1377, 1378, 1379, 1382,
     1383, 1384, 1385, 1387, 1388, 1389, 1390, 1391, 1392, 1393,
     1395, 1396, 1398, 1399, 1400, 1402, 1403, 1404, 1406, 1407,
     1408, 1409, 1410, 1412, 1414, 1416, 1417, 1418, 1419, 1420,
     1421, 1423, 1424, 1425, 1428, 1429, 1430, 1431, 1433, 1434,

     1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444,
     1445, 1446, 1449, 1450, 1453, 1455, 1456, 1457, 1458, 1460,
     1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1475,
     1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485,
     1487, 1488, 1489, 1490, 1491, 1493, 1494, 1497, 1498, 1500,
     1501, 1502, 1503, 1504, 1511, 1512, 1513, 1514, 1515, 1517,
     1519, 1520, 1522, 1523, 1524, 1525, 1526, 1528, 1529, 1531,
     1534, 1539, 1534, 1534, 1535, 1535, 1535, 1535, 1536, 1536,
     1536, 1536, 1537, 1537, 1538, 1538,  637,  636,  635,  634,
      633,  632,  631,  630,  629,  628,  627,  626,  625,  624,

      623,  622,  621,  620,  619,  618,  617,  616,  615,  614,
      613,  612,  609,  608,  606,  605,  603,  602,  600,  599,
      598,  597,  596,  595,  594,  593,  591,  589,  588,  587,
      586,  585,  584,  583,  582,  581,  580,  579,  578,  577,
      576,  575,  574,  572,  571,  570,  569,  568,  567,  566,
      565,  564,  562,  561,  560,  559,  558,  557,  556,  555,
      554,  553,  552,  551,  550,  549,  548,  547,  546,  545,
      544,  542,  541,  540,  539,  538,  537,  536,  535,  534,
      533,  532,  531,  530,  529,  528,  527,  526,  525,  524,
      521,  520,  519,  518,  517,  516,  515,  514,  513,  512,

      511,  510,  509,  508,  507,  506,  505,  504,  503,  502,
      501,  500,  499,  498,  497,  496,  494,  493,  492,  490,
      489,  488,  486,  484,  483,  482,  481,  480,  479,  478,
      477,  476,  475,  474,  473,  472,  471,  470,  469,  468,
      467,  466,  465,  464,  463,  462,  461,  460,  459,  458,
      457,  456,  455,  454,  453,  451,  450,  449,  448,  447,
      446,  445,  444,  443,  442,  441,  440,  439,  438,  436,
      435,  434,  433,  432,  431,  430,  429,  428,  427,  426,
      425,  424,  423,  422,  421,  420,  418,  417,  416,  415,
      414,  413,  412,  411,  410,  409,  408,  407,  406,  404,

      403,  402,  401,  400,  399,  398,  396,  395,  394,  393,
      391,  390,  389,  388,  387,  386,  385,  384,  383,  382,
      381,  380,  379,  378,  377,  376,  374,  373,  372,  371,
      370,  369,  368,  367,  366,  365,  364,  363,  361,  360,
      358,  356,  355,  354,  353,  352,  349,  348,  346,  345,
      344,  343,  342,  341,  340,  339,  338,  337,  336,  335,
      334,  333,  332,  331,  330,  329,  326,  325,  324,  323,
      322,  321,  320,  319,  318,  317,  316,  315,  314,  313,
      312,  311,  310,  309,  308,  307,  306,  305,  304,  303,
      302,  301,  300,  299,  298,  297,  296,  295,  294,  293,

      292,  291,  289,  288,  287,  285,  284,  283,  282,  281,
      280,  279,  278,  277,  276,  275,  274,  273,  272,  270,
      269,  268,  267,  266,  265,  264,  263,  262,  261,  260,
      259,  258,  257,  256,  255,  254,  253,  252,  251,  249,
      248,  247,  246,  245,  243,  242,  241,  240,  239,  237,
      236,  235,  234,  232,  231,  230,  227,  226,  225,  224,
      223,  219,  218,  217,  216,  215,  214,  213,  211,  209,
      205,  204,  203,  202,  201,  200,  199,  198,  197,  196,
      195,  194,  193,  192,  188,  186,  185,  184,  183,  182,
      178,  177,  176,  174,  173,  172,  168,  167,  164,  163,

      161,  160,  159,  157,  156,  154,  152,  151,  150,  146,
      145,  144,  142,  141,  140,  139,  138,  137,  136,  135,
      134,  132,  131,  130,  129,  128,  127,  126,  124,  123,
      121,  120,  118,  117,  116,  115,  113,  112,  111,  110,
      109,  108,  107,  105,  104,  102,  101,  100,   97,   96,
       95,   93,   92,   91,   90,   89,   88,   80,   78,   76,
       75,   74,   73,   71,   70,   69,   68,   67,   66,   65,
       58,   56,   50,   47,   46,   34,   33,   32,   29,   24,
       21,   10,    9,    7,    5, 1533, 1533, 1533, 1533, 1533,
     1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533,

     1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533,
     1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533,
     1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533,
     1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533,
     1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "VRML97.l"
#line 2 "VRML97.l"
/******************************************************************
*
*	CyberVRML97 for C++
*
*	Copyright (C) Satoshi Konno 1996-2002
*
*	File:	vrml.l
*
******************************************************************/
 
#include <stdio.h>
#include <string.h>
#include <string>
#include <sstream>
#include <x3d/VRML97Parser.h>
#include <x3d/VRML97ParserFunc.h>
#include <x3d/VRML97.tab.h>

using namespace CyberX3D;

static const char *in_buffer = 0;
static int in_size = 0;
static int	nCurrentLine = 1;
static std::string lineBuffer;
static std::string name;
static void (*callbackFn)(int nLine, void *info);
static void *callbackFnInfo;

#define input	yyinput
#define output	yyoutput


#line 1379 "VRML97.yy.cpp"

#define INITIAL 0
#define SCRIPTNODE 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
//#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 39 "VRML97.l"


#line 1536 "VRML97.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1534 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1686 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 41 "VRML97.l"
{ yylval.ival = atoi(yytext); return NUMBER;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 42 "VRML97.l"
{ yylval.fval = (float)atof(yytext); return FLOAT;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 43 "VRML97.l"
{ sscanf(yytext, "0x%x", &yylval.ival); return NUMBER; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 45 "VRML97.l"
{ BEGIN INITIAL;	return '}'; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 46 "VRML97.l"
{ return '{'; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 47 "VRML97.l"
{ return '['; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 48 "VRML97.l"
{ return ']'; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 50 "VRML97.l"
;
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 51 "VRML97.l"
{ CurrentLineIncrement();}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 52 "VRML97.l"
{ }
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 53 "VRML97.l"
{ lineBuffer = (yytext+1); CurrentLineIncrement(); yyless(1);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 54 "VRML97.l"
{ yytext[yyleng-1] = '\0'; yylval.sval = yytext+1;  return STRING; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 56 "VRML97.l"
{ yylval.ival = 1; return NUMBER; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 57 "VRML97.l"
{ yylval.ival = 0; return NUMBER; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 58 "VRML97.l"
{ return NULL_STRING; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 60 "VRML97.l"
{ return ANCHOR; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 61 "VRML97.l"
{ return APPEARANCE; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 62 "VRML97.l"
{ return AUDIOCLIP; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 63 "VRML97.l"
{ return BACKGROUND; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 64 "VRML97.l"
{ return BILLBOARD; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 65 "VRML97.l"
{ return BOX; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 66 "VRML97.l"
{ return COLLISION; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 67 "VRML97.l"
{ return COLOR; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 68 "VRML97.l"
{ return COLOR_INTERP; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 69 "VRML97.l"
{ return CONE; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 70 "VRML97.l"
{ return COORDINATE; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 71 "VRML97.l"
{ return COORDINATE_INTERP; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 72 "VRML97.l"
{ return CYLINDER; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 73 "VRML97.l"
{ return CYLINDER_SENSOR; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 74 "VRML97.l"
{ return DIRECTIONALLIGHT; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 75 "VRML97.l"
{ return ELEVATION_GRID; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 76 "VRML97.l"
{ return EXTRUSION; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 77 "VRML97.l"
{ return FOG; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 78 "VRML97.l"
{ return FONTSTYLE; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 79 "VRML97.l"
{ return GROUP; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 80 "VRML97.l"
{ return IMAGE_TEXTURE; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 81 "VRML97.l"
{ return INDEXEDFACESET; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 82 "VRML97.l"
{ return INDEXEDLINESET; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 83 "VRML97.l"
{ return INLINE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 84 "VRML97.l"
{ return LOD; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 85 "VRML97.l"
{ return MATERIAL; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 86 "VRML97.l"
{ return MOVIE_TEXTURE; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 87 "VRML97.l"
{ return NAVIGATION_INFO; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 88 "VRML97.l"
{ return NORMAL; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 89 "VRML97.l"
{ return NORMAL_INTERP; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 90 "VRML97.l"
{ yylval.ival = 1; return NUMBER; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 91 "VRML97.l"
{ yylval.ival = 0; return NUMBER; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 92 "VRML97.l"
{ return ORIENTATION_INTERP; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 93 "VRML97.l"
{ return PIXEL_TEXTURE; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 94 "VRML97.l"
{ return PLANE_SENSOR; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 95 "VRML97.l"
{ return POINTLIGHT; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 96 "VRML97.l"
{ return POINTSET; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 97 "VRML97.l"
{ return POSITION_INTERP; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 98 "VRML97.l"
{ return PROXIMITY_SENSOR; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 99 "VRML97.l"
{ return SCALAR_INTERP; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 100 "VRML97.l"
{ BEGIN SCRIPTNODE;	return SCRIPT; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 101 "VRML97.l"
{ return SHAPE; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 102 "VRML97.l"
{ return SOUND; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 103 "VRML97.l"
{ return SPHERE; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 104 "VRML97.l"
{ return SPHERE_SENSOR; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 105 "VRML97.l"
{ return SPOTLIGHT; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 106 "VRML97.l"
{ return SWITCH; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 107 "VRML97.l"
{ return TEXT; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 108 "VRML97.l"
{ return TEXTURE_COORDINATE; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 109 "VRML97.l"
{ return TEXTURE_TRANSFORM; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 110 "VRML97.l"
{ return TIME_SENSOR; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 111 "VRML97.l"
{ return TOUCH_SENSOR; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 112 "VRML97.l"
{ return TRANSFORM; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 113 "VRML97.l"
{ return VIEWPOINT; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 114 "VRML97.l"
{ return VISIBILITY_SENSOR; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 115 "VRML97.l"
{ return WORLD_INFO; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 117 "VRML97.l"
{ return S_AMBIENT_INTENSITY; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 118 "VRML97.l"
{ return S_APPEARANCE; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 119 "VRML97.l"
{ return S_ATTENUATION; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 120 "VRML97.l"
{ return S_AUTO_OFFSET; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 121 "VRML97.l"
{ return S_AVATAR_SIZE; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 122 "VRML97.l"
{ return S_AXIS_OF_ROTATION;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 123 "VRML97.l"
{ return S_BACKURL; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 124 "VRML97.l"
{ return S_BBOXCENTER; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 125 "VRML97.l"
{ return S_BBOXSIZE; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 126 "VRML97.l"
{ return S_BERM_WIDTH; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 127 "VRML97.l"
{ return S_BEGIN_CAP; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 128 "VRML97.l"
{ return S_BOTTOM; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 129 "VRML97.l"
{ return S_BOTTOMRADIUS; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 130 "VRML97.l"
{ return S_BOTTOMURL; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 131 "VRML97.l"
{ return S_CCW; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 132 "VRML97.l"
{ return S_CENTER; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 133 "VRML97.l"
{ return S_CHILDREN; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 134 "VRML97.l"
{ return S_CHOICE; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 135 "VRML97.l"
{ return S_COLLIDE; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 136 "VRML97.l"
{ return S_COLLIDETIME;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 137 "VRML97.l"
{ return S_COLOR; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 138 "VRML97.l"
{ return S_COLOR_INDEX; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 139 "VRML97.l"
{ return S_COLOR_PER_VERTEX; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 140 "VRML97.l"
{ return S_CONVEX; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 141 "VRML97.l"
{ return S_COORD; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 142 "VRML97.l"
{ return S_COORD_INDEX; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 143 "VRML97.l"
{ return S_CREASE_ANGLE;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 144 "VRML97.l"
{ return S_CROSS_SECTION; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 145 "VRML97.l"
{ return S_CUTOFFANGLE; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 146 "VRML97.l"
{ return S_CYCLE_INTERVAL; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 147 "VRML97.l"
{ return S_DESCRIPTION; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 148 "VRML97.l"
{ return S_DIFFUSECOLOR; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 149 "VRML97.l"
{ return S_DIRECTION; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 150 "VRML97.l"
{ return S_DISK_ANGLE; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 151 "VRML97.l"
{ return S_EMISSIVECOLOR; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 152 "VRML97.l"
{ return S_ENABLED; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 153 "VRML97.l"
{ return S_END_CAP; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 154 "VRML97.l"
{ return S_FAMILY; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 155 "VRML97.l"
{ return S_FIELD_OF_VIEW; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 156 "VRML97.l"
{ return S_FOG_TYPE; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 157 "VRML97.l"
{ return S_FONTSTYLE; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 158 "VRML97.l"
{ return S_FRONTURL; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 159 "VRML97.l"
{ return S_GEOMETRY; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 160 "VRML97.l"
{ return S_GROUNDANGLE; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 161 "VRML97.l"
{ return S_GROUNDCOLOR; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 162 "VRML97.l"
{ return S_HEADLIGHT; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 163 "VRML97.l"
{ return S_HEIGHT; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 164 "VRML97.l"
{ return S_HORIZONTAL; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 165 "VRML97.l"
{ return S_IMAGE; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 166 "VRML97.l"
{ return S_INFO; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 167 "VRML97.l"
{ return S_INTENSITY; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 168 "VRML97.l"
{ return S_JUMP; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 169 "VRML97.l"
{ return S_JUSTIFY; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 170 "VRML97.l"
{ return S_KEY; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 171 "VRML97.l"
{ return S_KEYVALUE; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 172 "VRML97.l"
{ return S_LANGUAGE; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 173 "VRML97.l"
{ return S_LEFT2RIGHT; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 174 "VRML97.l"
{ return S_LEFTURL; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 175 "VRML97.l"
{ return S_LENGTH; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 176 "VRML97.l"
{ return S_LEVEL; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 177 "VRML97.l"
{ return S_LOCATION; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 178 "VRML97.l"
{ return S_LOOP; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 179 "VRML97.l"
{ return S_MATERIAL; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 180 "VRML97.l"
{ return S_MAX_ANGLE; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 181 "VRML97.l"
{ return S_MAX_BACK; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 182 "VRML97.l"
{ return S_MAX_EXTENT; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 183 "VRML97.l"
{ return S_MAX_FRONT; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 184 "VRML97.l"
{ return S_MAX_POSITION; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 185 "VRML97.l"
{ return S_MIN_ANGLE; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 186 "VRML97.l"
{ return S_MIN_BACK; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 187 "VRML97.l"
{ return S_MIN_FRONT; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 188 "VRML97.l"
{ return S_MIN_POSITION; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 189 "VRML97.l"
{ return S_NORMAL; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 190 "VRML97.l"
{ return S_NORMAL_INDEX; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 191 "VRML97.l"
{ return S_NORMAL_PER_VERTEX; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 192 "VRML97.l"
{ return S_OFFSET;}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 193 "VRML97.l"
{ return S_ON; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 194 "VRML97.l"
{ return S_ORIENTATION; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 195 "VRML97.l"
{ return S_PARAMETER; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 196 "VRML97.l"
{ return S_PICTH; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 197 "VRML97.l"
{ return S_POINT; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 198 "VRML97.l"
{ return S_POSITION; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 199 "VRML97.l"
{ return S_PRIORITY; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 200 "VRML97.l"
{ return S_PROXY; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 201 "VRML97.l"
{ return S_RADIUS; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 202 "VRML97.l"
{ return S_RANGE; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 203 "VRML97.l"
{ return S_REPEAT_S; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 204 "VRML97.l"
{ return S_REPEAT_T; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 205 "VRML97.l"
{ return S_RIGHTURL; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 206 "VRML97.l"
{ return S_ROTATION; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 207 "VRML97.l"
{ return S_SCALE; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 208 "VRML97.l"
{ return S_SCALEORIENTATION; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 209 "VRML97.l"
{ return S_SHININESS; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 210 "VRML97.l"
{ return S_SIDE; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 211 "VRML97.l"
{ return S_SIZE; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 212 "VRML97.l"
{ return S_SKYANGLE; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 213 "VRML97.l"
{ return S_SKYCOLOR; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 214 "VRML97.l"
{ return S_SOLID;}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 215 "VRML97.l"
{ return S_SOURCE; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 216 "VRML97.l"
{ return S_SPACING; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 217 "VRML97.l"
{ return S_SPATIALIZE; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 218 "VRML97.l"
{ return S_SPECULARCOLOR; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 219 "VRML97.l"
{ return S_SPEED; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 220 "VRML97.l"
{ return S_SPINE; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 221 "VRML97.l"
{ return S_STARTTIME; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 222 "VRML97.l"
{ return S_STOPTIME; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 223 "VRML97.l"
{ return S_STRING; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 224 "VRML97.l"
{ return S_STYLE; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 225 "VRML97.l"
{ return S_TEXCOORD; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 226 "VRML97.l"
{ return S_TEXCOORD_INDEX;}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 227 "VRML97.l"
{ return S_TEXTURE; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 228 "VRML97.l"
{ return S_TEXTURETRANSFORM; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 229 "VRML97.l"
{ return S_TITLE; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 230 "VRML97.l"
{ return S_TOP; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 231 "VRML97.l"
{ return S_TOP2BOTTOM; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 232 "VRML97.l"
{ return S_TOPURL; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 233 "VRML97.l"
{ return S_TRANSLATION; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 234 "VRML97.l"
{ return S_TRANSPARENCY; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 235 "VRML97.l"
{ return S_TYPE; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 236 "VRML97.l"
{ return S_URL; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 237 "VRML97.l"
{ return S_VECTOR; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 238 "VRML97.l"
{ return S_VISIBILITY_LIMIT; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 239 "VRML97.l"
{ return S_VISIBILITY_RANGE; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 240 "VRML97.l"
{ return S_WHICHCHILD; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 241 "VRML97.l"
{ return S_WHICHCHOICE; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 242 "VRML97.l"
{ return S_XDIMENSION; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 243 "VRML97.l"
{ return S_XSPACING; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 244 "VRML97.l"
{ return S_ZDIMENSION; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 245 "VRML97.l"
{ return S_ZSPACING; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 247 "VRML97.l"
{ return S_VALUE_CHANGED; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 249 "VRML97.l"
{
	std::ostringstream defBuf;
	int c = input();
	while (c != '{' && c != EOF) {
		defBuf << (char)(c);
		c = input();
	}

	char	defName[256];
	char	nodeName[256];
	const std::string &defStr = defBuf.str();
	const char *defCStr = defStr.c_str();
	sscanf(defStr.c_str(), "%255s %255s", defName, nodeName);

	std::string unputbuf;
	unputbuf.append(nodeName);
	unputbuf.append(" {");

	SetDEFName(defName);
	UnputString(unputbuf.c_str());
}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 271 "VRML97.l"
{
	std::ostringstream useBuf;
	int c = 0;
	do {
		c = input();
		if (c == '\n')
			nCurrentLine++;
	} while (c == '\t' || c == ' ');

	while (('0' <= c && c <= '9') || ('A' <= c && c <= 'Z') || ('a' <= c && c <= 'z') || c == '_' || c == '-' || c == '+') {
		useBuf << (char)(c);
		c = input();
		if (c == '\n')
			nCurrentLine++;
	}
	unput(c);

	std::string useStr = useBuf.str();
#ifdef UNUSE_DEF_NODE
	Node *defNode = GetParserObject()->findLastNode(useStr.c_str());
	Node *useParentNode = GetCurrentNodeObject();
	if (defNode) {	
		if (useParentNode == NULL || (useParentNode != defNode && useParentNode->isAncestorNode(defNode) == false)) {
			Node *instanceNode = defNode->createInstanceNode();
			if (instanceNode)
				ParserAddNode(instanceNode);
		}
	}
	return USE;
#else
	Node *node = GetParserObject()->findLastNode(useStr.c_str());
	if (node) {
		Node *defNode = node->createDEFNode();
		ParserAddNode(defNode);
	}
	return USE;
#endif
}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 310 "VRML97.l"
{
	std::ostringstream protoNameBuf;
	int c = 0;
	do {
		c = input();
		protoNameBuf << (char)(c);
		if (c == '\n')
			nCurrentLine++;
	} while (c != '[' && c != EOF);

	std::string protoNameStr = protoNameBuf.str();
	char *protoName = new char[protoNameStr.length()+1];
	sscanf(protoNameStr.c_str(), "%s", protoName);

	int bigBracket = 1;

	std::ostringstream fieldBuf;
	do {
		c = input();
		if (c == ']') {
			bigBracket--;
			if (bigBracket <= 0)
				break;
		}
		if (c == '[')
			bigBracket++;
		if (c == '\n')
			nCurrentLine++;
		fieldBuf << (char)(c);
	} while (c != EOF);
	std::string fieldString = fieldBuf.str();

	while (c != '{' && c != EOF) {
		c = input();
		if (c == '\n')
			nCurrentLine++;
	}

	std::ostringstream protoDefBuf;
	do {
		c = input();
		if (c != '}')protoDefBuf << (char)(c);
		if (c == '\n')
			nCurrentLine++;
	} while (c != '{' && c != '}' && c != EOF);

	if (c != '}') {
	
		int inputFlag = 1;
		do {
			c = input();
	
			switch (c) {
			case '{' : 
				{
					inputFlag++;
				}
				break;
			case '}' : 
				{
					inputFlag--;
				}
				break;
			case '\n' :
				{ 
					nCurrentLine++;
				}
				break;
			case '#'	: /* sval comment */
				{
					do {
						c = input();
					} while (c != '\n');
					protoDefBuf << '\n';
					nCurrentLine++;
				}
			}
	
			protoDefBuf << (char)(c);

		} while (0 < inputFlag && c != EOF);

		do {
			c = input();
			if (c == '\n')
				nCurrentLine++;
		} while (c != '}' && c != EOF);

	}

	std::string protoDefSet = protoDefBuf.str();
	PROTO *proto = AddPROTOInfo(protoName, protoDefSet.c_str(), fieldString.c_str());

	delete []protoName;
}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 406 "VRML97.l"
{
	int c = 0;
	std::ostringstream routeBuf;
	do {
		c = input();
		if (c == '\n')
			CurrentLineIncrement();
		else
			routeBuf << (char)(c);
	} while (c != '\n' && c != EOF);
	std::string routeStr = routeBuf.str();
	ParserAddRouteInfo(routeStr.c_str());
}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 420 "VRML97.l"
{

	PROTO *proto = IsPROTOName(yytext);

	if (proto) {
		int c;
		c = 0;
		do {
			c = input();
			if (c == '\n')
				nCurrentLine++;
		} while (c != '{' && c != EOF);

		String readBuffer;
		int smallBracket = 1;
		do {
			c = input();
			if (c == '}') {
				smallBracket--;
				if (smallBracket <= 0)
					break;
			}
			if (c == '{')
				smallBracket++;
			readBuffer.append(c);
			if (c == '\n')
				nCurrentLine++;
		} while (c != EOF);

		const char *readValue = readBuffer.getValue();
		proto->addFields(readValue);

//		std::cout << "==== read value ===="<< std::endl;
//		std::cout << readValue << std::endl;

		String replaceBuffer;
		proto->getString(replaceBuffer);
		const char *replaceValue = replaceBuffer.getValue();
		UnputString(replaceValue);

//		std::cout << "==== replace value ===="<< std::endl;
//		std::cout << replaceValue << std::endl;

		proto->deleteFields();
	}
	else {
		name = yytext;
		yylval.sval = (char *)name.c_str();	
		return NAME;
	}
}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 472 "VRML97.l"
{ return S_DIRECT_OUTPUT; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 473 "VRML97.l"
{ return S_MUST_EVALUATE; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 474 "VRML97.l"
{ return S_URL; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 476 "VRML97.l"
{ return FIELD; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 477 "VRML97.l"
{ return EVENTIN; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 478 "VRML97.l"
{ return EVENTOUT; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 480 "VRML97.l"
{ return SFBOOL; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 481 "VRML97.l"
{ return SFFLOAT; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 482 "VRML97.l"
{ return SFINT32; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 483 "VRML97.l"
{ return SFTIME; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 484 "VRML97.l"
{ return SFROTATION; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 485 "VRML97.l"
{ return SFNODE; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 486 "VRML97.l"
{ return SFCOLOR; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 487 "VRML97.l"
{ return SFSTRING; }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 488 "VRML97.l"
{ return SFVEC2F; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 489 "VRML97.l"
{ return SFVEC3F; }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 491 "VRML97.l"
{ return MFBOOL; }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 492 "VRML97.l"
{ return MFFLOAT; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 493 "VRML97.l"
{ return MFINT32; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 494 "VRML97.l"
{ return MFTIME; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 495 "VRML97.l"
{ return MFROTATION; }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 496 "VRML97.l"
{ return MFNODE; }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 497 "VRML97.l"
{ return MFCOLOR; }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 498 "VRML97.l"
{ return MFIMAGE; }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 499 "VRML97.l"
{ return MFSTRING; }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 500 "VRML97.l"
{ return MFVEC2F; }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 501 "VRML97.l"
{ return MFVEC3F; }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 503 "VRML97.l"
{ return USE; }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 505 "VRML97.l"
{
//	char *name = strdup(yytext);
	char *name = new char[strlen(yytext)+1];
	strcpy(name, yytext);
	yylval.sval = name;	
	return	NAME;
}
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 513 "VRML97.l"
ECHO;
	YY_BREAK
#line 3021 "VRML97.yy.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SCRIPTNODE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1534 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1534 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1533);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 1;

	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 513 "VRML97.l"



int yywrap()
{
  return 1;
} 

int yyerror(char *errmsg) 
{ 
	ParserResult *presult = GetParserResultObject();
	presult->setErrorLineNumber(GetCurrentLineNumber());
	presult->setErrorMessage(errmsg);
	presult->setErrorToken(yytext);
	presult->setErrorLineString(GetErrorLineString());	
	return 0;
}

void CyberX3D::CurrentLineIncrement()
{
	nCurrentLine++;
	if (callbackFn) 
		callbackFn(nCurrentLine, callbackFnInfo);
}

void CyberX3D::MakeLexerBuffers(int lexBufferSize, int lineBufferSize)
{
	YY_BUFFER_STATE buffer = yy_create_buffer(yyin,lexBufferSize);
	yypush_buffer_state(buffer);
}

void CyberX3D::DeleteLexerBuffers(void)
{
	yy_delete_buffer(YY_CURRENT_BUFFER  );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	yypop_buffer_state();
}

void CyberX3D::SetLexCallbackFn(void (*func)(int nLine, void *info), void *fnInfo)
{
	callbackFn = func;
	callbackFnInfo = fnInfo;
}

int CyberX3D::UnputString(const char *pBegin)
{
	int nOutputLine = 0;

	if (!pBegin && !strlen(pBegin))
		return nOutputLine;

	const char *pEnd = pBegin + strlen(pBegin);
	while(pEnd > pBegin) {
		unput(*--pEnd);
		if (*pEnd == '\n')
			nOutputLine++;
	}
	return nOutputLine;
}

void CyberX3D::SetInputFile(FILE *fp)
{
  nCurrentLine = 1;
  yyrestart(fp);
}

int CyberX3D::GetCurrentLineNumber(void)
{
  return nCurrentLine;
}

const char *CyberX3D::GetErrorLineString(void)
{
  return lineBuffer.c_str();
}


void CyberX3D::SetInputBuffer(const char *str, int size) {
  nCurrentLine = 1;
  in_buffer = str;
  in_size = size;
}

void CyberX3D::MakeLexerStringBuffers(int lexBufferSize, int lineBufferSize)
{
        YY_BUFFER_STATE buffer = yy_scan_bytes(in_buffer,in_size);
	yypush_buffer_state(buffer);
}

void CyberX3D::DeleteLexerStringBuffers(void)
{
	yy_delete_buffer(YY_CURRENT_BUFFER  );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	yypop_buffer_state();
}


